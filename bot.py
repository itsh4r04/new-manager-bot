# -*- coding: utf-8 -*-

"""
A Telegram Bot to manage channels with a robust Owner/Admin role system,
mandatory join, and block detection. Features automatic banning from free channels.
"""

import logging
import json
import os
from telegram import Update, ChatMember, ChatMemberUpdated, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatType
from telegram.error import Forbidden
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, ChatMemberHandler, CallbackQueryHandler, MessageHandler, filters, JobQueue
# --- KEEPALIVE WEB SERVER (for Heroku/Koyeb) ---
import threading
try:
    from flask import Flask
    def _start_keepalive():
        port = int(os.environ.get("PORT", "0") or "0")
        if port:
            app = Flask(__name__)
            @app.get("/")
            def _index():
                return "OK", 200
            @app.get("/health")
            def _health():
                return "ok", 200
            th = threading.Thread(target=lambda: app.run(host="0.0.0.0", port=port, use_reloader=False), daemon=True)
            th.start()
except Exception:
    def _start_keepalive():
        pass

_start_keepalive()
# [AUTOCALL]


# --- CONFIGURATION SECTION ---
# --- Render Environment Variables se jankari lein ---

# 1. Telegram Bot Token from BotFather
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("Missing TELEGRAM_BOT_TOKEN environment variable")

# 2. Bot Owner User ID (Full Control)
OWNER_ID = int(os.environ.get("OWNER_ID", 0))

# 3. List of Admin User IDs (Can manage channels and post)
admin_ids_str = os.environ.get("ADMIN_IDS", "")
ADMIN_IDS = [int(admin_id.strip()) for admin_id in admin_ids_str.split(',') if admin_id.strip()]

# 4. Mandatory Channel Chat ID
MANDATORY_CHANNEL_ID = int(os.environ.get("MANDATORY_CHANNEL_ID", 0))

# 5. Mandatory Channel Invite Link
MANDATORY_CHANNEL_LINK = os.environ.get("MANDATORY_CHANNEL_LINK")

# 6. Contact Bot/User Link
CONTACT_ADMIN_LINK = os.environ.get("CONTACT_ADMIN_LINK")

# 7. Channel to log bot blocks
LOG_CHANNEL_ID = int(os.environ.get("LOG_CHANNEL_ID", 0))

# 8. Data file for persistence (Render Disk Path)
DATA_FILE = os.environ.get("DATA_FILE") or ("/data/bot_data.json" if os.path.exists("/data") else "bot_data.json")

# --- DYNAMIC DATA (Loaded from file) ---
FREE_CHANNELS = {}
FREE_CHANNEL_LINKS = {}
PAID_CHANNELS = []
USER_DATA = {}
BLOCKED_USER_IDS = set()
ACTIVE_CHATS = {}

# --- END OF CONFIGURATION ---

# Add Owner to Admin list automatically
if OWNER_ID and OWNER_ID not in ADMIN_IDS:
    ADMIN_IDS.append(OWNER_ID)

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# --- DATA PERSISTENCE ---
def save_data():
    """Saves the current bot data to a JSON file."""
    try:
        # FIX: Ensure the directory exists before writing the file
        os.makedirs(os.path.dirname(DATA_FILE), exist_ok=True)
        data = {
            "ADMIN_IDS": ADMIN_IDS,
            "FREE_CHANNELS": FREE_CHANNELS,
            "FREE_CHANNEL_LINKS": FREE_CHANNEL_LINKS,
            "PAID_CHANNELS": PAID_CHANNELS,
            "BLOCKED_USER_IDS": list(BLOCKED_USER_IDS),
            "ACTIVE_CHATS": ACTIVE_CHATS
        }
        with open(DATA_FILE, "w") as f:
            json.dump(data, f, indent=4)
        logger.info("Data saved successfully.")
    except Exception as e:
        logger.error(f"Error saving data: {e}")

def load_data():
    """Loads bot data from a JSON file on startup."""
    global ADMIN_IDS, FREE_CHANNELS, FREE_CHANNEL_LINKS, PAID_CHANNELS, BLOCKED_USER_IDS, ACTIVE_CHATS
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            ADMIN_IDS = data.get("ADMIN_IDS", ADMIN_IDS)
            FREE_CHANNELS = {int(k): v for k, v in data.get("FREE_CHANNELS", {}).items()}
            FREE_CHANNEL_LINKS = {int(k): v for k, v in data.get("FREE_CHANNEL_LINKS", {}).items()}
            PAID_CHANNELS = data.get("PAID_CHANNELS", [])
            BLOCKED_USER_IDS = set(data.get("BLOCKED_USER_IDS", []))
            ACTIVE_CHATS = {int(k): v for k, v in data.get("ACTIVE_CHATS", {}).items()}
            logger.info("Data loaded successfully.")
    except FileNotFoundError:
        logger.warning("Data file not found. Using default values and creating a new file.")
        save_data()
    except Exception as e:
        logger.error(f"Error loading data: {e}")

# --- PERMISSION CHECKS ---
def is_owner(user_id: int) -> bool: return user_id == OWNER_ID
def is_admin(user_id: int) -> bool: return user_id in ADMIN_IDS


# --- HELPER FUNCTIONS ---
async def is_user_member_of_channel(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if is_admin(user_id): return True
    try:
        member = await context.bot.get_chat_member(chat_id=MANDATORY_CHANNEL_ID, user_id=user_id)
        return member.status in [ChatMember.OWNER, ChatMember.ADMINISTRATOR, ChatMember.MEMBER]
    except Exception as e:
        logger.error(f"Error checking membership for {user_id} in {MANDATORY_CHANNEL_ID}: {e}")
        return False

async def remove_user_from_free_channels(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """Kicks a user from all free channels by banning and immediately unbanning."""
    if is_admin(user_id): return
    logger.info(f"Kicking user {user_id} from all free channels.")
    for channel_id in FREE_CHANNELS.keys():
        try:
            await context.bot.ban_chat_member(chat_id=channel_id, user_id=user_id)
            await context.bot.unban_chat_member(chat_id=channel_id, user_id=user_id)
            logger.info(f"User {user_id} kicked from channel {channel_id}.")
        except Exception as e:
            logger.error(f"Failed to kick user {user_id} from channel {channel_id}: {e}")


# --- CHAT MEMBER HANDLER ---
async def track_bot_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Tracks when the bot is added to or removed from a chat."""
    result = update.my_chat_member
    if not result: return

    chat = result.chat
    new_status = result.new_chat_member.status

    if new_status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR]:
        logger.info(f"Bot was added to chat '{chat.title}' ({chat.id}).")
        ACTIVE_CHATS[chat.id] = chat.title
    elif new_status in [ChatMember.LEFT, ChatMember.BANNED]:
        logger.info(f"Bot was removed from chat '{chat.title}' ({chat.id}).")
        if chat.id in ACTIVE_CHATS:
            ACTIVE_CHATS.pop(chat.id)
    
    save_data()

async def track_user_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    result = update.chat_member
    if not result: return
    user = result.from_user
    if is_admin(user.id): return

    old_status = result.old_chat_member.status
    new_status = result.new_chat_member.status
    was_member = old_status in [ChatMember.OWNER, ChatMember.ADMINISTRATOR, ChatMember.MEMBER]
    is_now_kicked_or_left = new_status in [ChatMember.LEFT, ChatMember.BANNED]

    if was_member and is_now_kicked_or_left:
        if result.chat.id == MANDATORY_CHANNEL_ID:
            logger.info(f"User {user.id} left mandatory channel. Kicking from all free channels.")
            await remove_user_from_free_channels(user.id, context)
        elif result.chat.type == ChatType.PRIVATE:
            logger.info(f"User {user.id} blocked the bot. Kicking from all free channels.")
            user_info = USER_DATA.pop(user.id, {'full_name': user.full_name, 'username': user.username})
            try:
                username = f"@{user_info['username']}" if user_info.get('username') else "N/A"
                log_message = (f"ЁЯЪл **User Blocked Bot** ЁЯЪл\n\n"
                               f"**Name:** {user_info.get('full_name')}\n"
                               f"**Username:** {username}\n"
                               f"**ID:** `{user.id}`")
                await context.bot.send_message(chat_id=LOG_CHANNEL_ID, text=log_message, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"Failed to send block notification to log channel: {e}")
            await remove_user_from_free_channels(user.id, context)

# --- MENU & BUTTONS ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user: return # FIX: Handle cases where user is None
    if user.id in BLOCKED_USER_IDS: return

    USER_DATA[user.id] = {'full_name': user.full_name, 'username': user.username}
    
    if is_owner(user.id):
        keyboard = [[InlineKeyboardButton("ЁЯСС рдПрдбрдорд┐рди рдкреИрдирд▓", callback_data='admin_panel')], [InlineKeyboardButton("ЁЯФС рдорд╛рд▓рд┐рдХ рдкреИрдирд▓", callback_data='owner_panel')]]
        await update.message.reply_text("рдирдорд╕реНрддреЗ, рдорд╛рд▓рд┐рдХ! рдХреГрдкрдпрд╛ рдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ:", reply_markup=InlineKeyboardMarkup(keyboard))
    elif is_admin(user.id):
        keyboard = [[InlineKeyboardButton("ЁЯСС рдПрдбрдорд┐рди рдкреИрдирд▓", callback_data='admin_panel')]]
        await update.message.reply_text("рдирдорд╕реНрддреЗ, рдПрдбрдорд┐рди! рдХреГрдкрдпрд╛ рдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        is_member = await is_user_member_of_channel(user.id, context)
        if is_member:
            keyboard = [
                [InlineKeyboardButton("ЁЯЖУ рдлреНрд░реА рдЪреИрдирд▓", callback_data='show_free_channels'), InlineKeyboardButton("ЁЯТО рдкреЗрдб рдЪреИрдирд▓", callback_data='show_paid_channels')],
                [InlineKeyboardButton("ЁЯУв рдЕрдирд┐рд╡рд╛рд░реНрдп рдЪреИрдирд▓", url=MANDATORY_CHANNEL_LINK), InlineKeyboardButton("ЁЯУЮ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ", url=CONTACT_ADMIN_LINK)],
                [InlineKeyboardButton("ЁЯЖФ рдореЗрд░реА ID", callback_data='get_my_id')]
            ]
            await update.message.reply_text(f"рдирдорд╕реНрддреЗ, {user.first_name}! рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            if user.id in USER_DATA:
                await remove_user_from_free_channels(user.id, context)
            welcome_message = (f"<b>WELCOME TO H4R BATCH BOT</b>\n\nрдирдорд╕реНрддреЗ, {user.first_name}!\n\n"
                               "<b>рдЪреЗрддрд╛рд╡рдиреА:</b> рдпрджрд┐ рдЖрдк рдЗрд╕ рдмреЙрдЯ рдХреЛ рдмреНрд▓реЙрдХ рдХрд░рддреЗ рд╣реИрдВ рдпрд╛ рдореБрдЦреНрдп рдЪреИрдирд▓ рдХреЛ рдЫреЛрдбрд╝ рджреЗрддреЗ рд╣реИрдВ, рддреЛ рдЖрдкрдХреЛ рд╕рднреА рдлреНрд░реА рдЪреИрдирд▓реЛрдВ рд╕реЗ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред\n\n"
                               "рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ рдФрд░ рдлрд┐рд░ 'рдореИрдВрдиреЗ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ' рдмрдЯрди рджрдмрд╛рдПрдВред")
            keyboard = [[InlineKeyboardButton("тЮбя╕П рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ", url=MANDATORY_CHANNEL_LINK)], [InlineKeyboardButton("тЬЕ рдореИрдВрдиреЗ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдпрд╛ рд╣реИ", callback_data='verify_join')]]
            await update.message.reply_html(welcome_message, reply_markup=InlineKeyboardMarkup(keyboard))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or user.id in BLOCKED_USER_IDS: return
    
    if is_admin(user.id):
        help_text = "рдирдорд╕реНрддреЗ! рд╕рднреА рдкреНрд░рдмрдВрдзрди рд╡рд┐рдХрд▓реНрдкреЛрдВ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ /start рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдмрдЯрди рд╡рд╛рд▓рд╛ рдореЗрдиреВ рдЦреЛрд▓реЗрдВред"
    else:
        is_member = await is_user_member_of_channel(user.id, context)
        if is_member:
            help_text = "рдирдорд╕реНрддреЗ! рдЖрдк рд╣рдорд╛рд░реЗ рд╕рджрд╕реНрдп рд╣реИрдВред рдЪреИрдирд▓реЛрдВ рдХреА рд╕реВрдЪреА рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП /start рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдореЗрдиреВ рдЦреЛрд▓ рд╕рдХрддреЗ рд╣реИрдВред"
        else:
            help_text = "рдирдорд╕реНрддреЗ! рдЗрд╕ рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдЕрдирд┐рд╡рд╛рд░реНрдп рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВред рдЖрдк /start рдХрдорд╛рдВрдб рд╕реЗ рдЬреНрд╡рд╛рдЗрди рд▓рд┐рдВрдХ рдкреНрд░рд╛рдкреНрдд рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред"
        
    await update.message.reply_text(help_text)

async def id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    if not user or not chat: return

    if chat.type == ChatType.PRIVATE:
        text = f"Aapki User ID hai: <code>{user.id}</code>\n(Click karke copy karein)"
    else:
        text = f"Is {chat.type.capitalize()} ki Chat ID hai: <code>{chat.id}</code>\n(Click karke copy karein)"
    await update.message.reply_html(text)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    if user_id in BLOCKED_USER_IDS: 
        await query.answer("You are blocked from using this bot.", show_alert=True)
        return
    
    # --- Join Verification ---
    if query.data == 'verify_join':
        await query.answer("рдЬрд╛рдБрдЪ рд╣реЛ рд░рд╣реА рд╣реИ...")
        is_member = await is_user_member_of_channel(user_id, context)
        if is_member:
            await query.answer("рдзрдиреНрдпрд╡рд╛рдж! рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред")
            keyboard = [
                [InlineKeyboardButton("ЁЯЖУ рдлреНрд░реА рдЪреИрдирд▓", callback_data='show_free_channels'), InlineKeyboardButton("ЁЯТО рдкреЗрдб рдЪреИрдирд▓", callback_data='show_paid_channels')],
                [InlineKeyboardButton("ЁЯУв рдЕрдирд┐рд╡рд╛рд░реНрдп рдЪреИрдирд▓", url=MANDATORY_CHANNEL_LINK), InlineKeyboardButton("ЁЯУЮ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ", url=CONTACT_ADMIN_LINK)],
                [InlineKeyboardButton("ЁЯЖФ рдореЗрд░реА ID", callback_data='get_my_id')]
            ]
            await query.edit_message_text(f"рдирдорд╕реНрддреЗ, {query.from_user.first_name}! рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.answer("рдЖрдк рдЕрднреА рддрдХ рдЪреИрдирд▓ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рдирд╣реАрдВ рд╣реБрдП рд╣реИрдВред рдХреГрдкрдпрд╛ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ рдФрд░ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред", show_alert=True)
        return

    # --- Get User ID ---
    if query.data == 'get_my_id':
        await query.answer(f"рдЖрдкрдХреА рдпреВрдЬрд░ рдЖрдИрдбреА: {user_id}", show_alert=True)
        return

    # --- Leave Chat Action ---
    if query.data.startswith('leave_chat_'):
        if not is_owner(user_id): return
        chat_id_to_leave = int(query.data.split('_')[-1])
        try:
            await context.bot.leave_chat(chat_id=chat_id_to_leave)
            await query.answer(f"рдЪреИрдЯ {chat_id_to_leave} рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЫреЛрдбрд╝ рджрд┐рдпрд╛ред")
            if chat_id_to_leave in ACTIVE_CHATS:
                ACTIVE_CHATS.pop(chat_id_to_leave)
                save_data()
            # Refresh the list
            keyboard = []
            if ACTIVE_CHATS:
                for chat_id, title in ACTIVE_CHATS.items():
                    keyboard.append([InlineKeyboardButton(f"{title} ({chat_id})", callback_data='noop'), InlineKeyboardButton("тЭМ Leave", callback_data=f'leave_chat_{chat_id}')])
            keyboard.append([InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='owner_panel')])
            await query.edit_message_text("рдмреЙрдЯ рдЗрди рдЧреНрд░реБрдк/рдЪреИрдирд▓реЛрдВ рдореЗрдВ рд╣реИ:", reply_markup=InlineKeyboardMarkup(keyboard))
        except Exception as e:
            await query.answer(f"рдЪреИрдЯ рдЫреЛрдбрд╝рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓: {e}", show_alert=True)
        return

    await query.answer()
    
    # --- Main Menus ---
    if query.data == 'start_member':
        keyboard = [
            [InlineKeyboardButton("ЁЯЖУ рдлреНрд░реА рдЪреИрдирд▓", callback_data='show_free_channels'), InlineKeyboardButton("ЁЯТО рдкреЗрдб рдЪреИрдирд▓", callback_data='show_paid_channels')],
            [InlineKeyboardButton("ЁЯУв рдЕрдирд┐рд╡рд╛рд░реНрдп рдЪреИрдирд▓", url=MANDATORY_CHANNEL_LINK), InlineKeyboardButton("ЁЯУЮ рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ", url=CONTACT_ADMIN_LINK)],
            [InlineKeyboardButton("ЁЯЖФ рдореЗрд░реА ID", callback_data='get_my_id')]
        ]
        await query.edit_message_text(f"рдирдорд╕реНрддреЗ, {query.from_user.first_name}! рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'main_menu_owner':
        keyboard = [[InlineKeyboardButton("ЁЯСС рдПрдбрдорд┐рди рдкреИрдирд▓", callback_data='admin_panel')], [InlineKeyboardButton("ЁЯФС рдорд╛рд▓рд┐рдХ рдкреИрдирд▓", callback_data='owner_panel')]]
        await query.edit_message_text("рдирдорд╕реНрддреЗ, рдорд╛рд▓рд┐рдХ! рдХреГрдкрдпрд╛ рдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'admin_panel':
        if not is_admin(user_id): return
        keyboard = [[InlineKeyboardButton("ЁЯУв рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ", callback_data='ask_broadcast_msg'), InlineKeyboardButton("тЬНя╕П рдкреЛрд╕реНрдЯ", callback_data='ask_post_msg')],
                    [InlineKeyboardButton("ЁЯЖУ рдлреНрд░реА рдЪреИрдирд▓ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ", callback_data='manage_free_channels')],
                    [InlineKeyboardButton("ЁЯТО рдкреЗрдб рдЪреИрдирд▓ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ", callback_data='manage_paid_channels')]]
        if is_owner(user_id):
            keyboard.append([InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='main_menu_owner')])
        await query.edit_message_text(text="ЁЯСС рдПрдбрдорд┐рди рдкреИрдирд▓:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'owner_panel':
        if not is_owner(user_id): return
        keyboard = [[InlineKeyboardButton("тЮХ рдПрдбрдорд┐рди рдЬреЛрдбрд╝реЗрдВ", callback_data='ask_add_admin'), InlineKeyboardButton("тЮЦ рдПрдбрдорд┐рди рд╣рдЯрд╛рдПрдВ", callback_data='ask_remove_admin')],
                    [InlineKeyboardButton("ЁЯУЛ рдПрдбрдорд┐рди рд╕реВрдЪреА", callback_data='list_admins')],
                    [InlineKeyboardButton("ЁЯСе рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ", callback_data='manage_users')],
                    [InlineKeyboardButton("ЁЯУб Join List", callback_data='join_list')],
                    [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='main_menu_owner')]]
        await query.edit_message_text(text="ЁЯФС рдорд╛рд▓рд┐рдХ рдкреИрдирд▓:", reply_markup=InlineKeyboardMarkup(keyboard))

    # --- Ask for Input ---
    elif query.data.startswith('ask_'):
        if not is_admin(user_id): return
        action = query.data.split('_', 1)[1]
        prompts = {
            'broadcast_msg': ("рд╕рднреА рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рд╕рдВрджреЗрд╢ рднреЗрдЬреЗрдВ:", 'awaiting_broadcast_message', 'admin_panel'),
            'post_msg': ("рд╕рднреА рдлреНрд░реА рдЪреИрдирд▓реЛрдВ рдкрд░ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рд╕рдВрджреЗрд╢ рднреЗрдЬреЗрдВ:", 'awaiting_post_message', 'admin_panel'),
            'add_admin': ("рдирдП рдПрдбрдорд┐рди рдХреА рдпреВрдЬрд░ рдЖрдИрдбреА рднреЗрдЬреЗрдВ:", 'awaiting_add_admin_id', 'owner_panel'),
            'remove_admin': ("рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдбрдорд┐рди рдХреА рдпреВрдЬрд░ рдЖрдИрдбреА рднреЗрдЬреЗрдВ:", 'awaiting_remove_admin_id', 'owner_panel'),
            'block_user': ("рдмреНрд▓реЙрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпреВрдЬрд░ рдХреА рдЖрдИрдбреА рднреЗрдЬреЗрдВ:", 'awaiting_block_user_id', 'manage_users'),
            'unblock_user': ("рдЕрдирдмреНрд▓реЙрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпреВрдЬрд░ рдХреА рдЖрдИрдбреА рднреЗрдЬреЗрдВ:", 'awaiting_unblock_user_id', 'manage_users'),
            'add_free_channel_name': ("рдХреГрдкрдпрд╛ рдирдП рдлреНрд░реА рдмреИрдЪ рдХрд╛ рдирд╛рдо рднреЗрдЬреЗрдВ:", 'awaiting_free_channel_name', 'manage_free_channels'),
            'remove_free_channel': ("рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдлреНрд░реА рдЪреИрдирд▓ рдХрд╛ рдирдВрдмрд░ рднреЗрдЬреЗрдВ:", 'awaiting_remove_free_channel_num', 'manage_free_channels'),
            'add_paid_channel_name': ("рдХреГрдкрдпрд╛ рдирдП рдкреЗрдб рдмреИрдЪ рдХрд╛ рдирд╛рдо рднреЗрдЬреЗрдВ:", 'awaiting_paid_channel_name', 'manage_paid_channels'),
            'remove_paid_channel': ("рд╣рдЯрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдкреЗрдб рдЪреИрдирд▓ рдХрд╛ рдирдВрдмрд░ рднреЗрдЬреЗрдВ:", 'awaiting_remove_paid_channel_num', 'manage_paid_channels'),
        }
        if action in prompts:
            prompt_text, state, back_cb = prompts[action]
            context.user_data['next_step'] = state
            keyboard = [[InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data=back_cb)]]
            await query.edit_message_text(prompt_text, reply_markup=InlineKeyboardMarkup(keyboard))

    # --- Manage Menus ---
    elif query.data == 'manage_free_channels':
        if not is_admin(user_id): return
        keyboard = [[InlineKeyboardButton("тЮХ рдЬреЛрдбрд╝реЗрдВ", callback_data='ask_add_free_channel_name'), InlineKeyboardButton("тЮЦ рд╣рдЯрд╛рдПрдВ", callback_data='ask_remove_free_channel')],
                    [InlineKeyboardButton("ЁЯУЛ рд╕реВрдЪреА рджреЗрдЦреЗрдВ", callback_data='list_free_channels_admin')],
                    [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='admin_panel')]]
        await query.edit_message_text("ЁЯЖУ рдлреНрд░реА рдЪреИрдирд▓ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ:", reply_markup=InlineKeyboardMarkup(keyboard))
        
    elif query.data == 'manage_paid_channels':
        if not is_admin(user_id): return
        keyboard = [[InlineKeyboardButton("тЮХ рдЬреЛрдбрд╝реЗрдВ", callback_data='ask_add_paid_channel_name'), InlineKeyboardButton("тЮЦ рд╣рдЯрд╛рдПрдВ", callback_data='ask_remove_paid_channel')],
                    [InlineKeyboardButton("ЁЯУЛ рд╕реВрдЪреА рджреЗрдЦреЗрдВ", callback_data='list_paid_channels_admin')],
                    [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='admin_panel')]]
        await query.edit_message_text("ЁЯТО рдкреЗрдб рдЪреИрдирд▓ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'manage_users':
        if not is_owner(user_id): return
        keyboard = [[InlineKeyboardButton("ЁЯУЛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рд╕реВрдЪреА", callback_data='list_users'), InlineKeyboardButton("ЁЯУК рдмреЙрдЯ рдЖрдБрдХрдбрд╝реЗ", callback_data='bot_stats')],
                    [InlineKeyboardButton("ЁЯЪл рдмреНрд▓реЙрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛", callback_data='ask_block_user'), InlineKeyboardButton("тЬЕ рдЕрдирдмреНрд▓реЙрдХ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛", callback_data='ask_unblock_user')],
                    [InlineKeyboardButton("ЁЯУЬ рдмреНрд▓реЙрдХ рд╕реВрдЪреА", callback_data='list_blocked_users')],
                    [InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='owner_panel')]]
        await query.edit_message_text("ЁЯСе рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ:", reply_markup=InlineKeyboardMarkup(keyboard))
    
    # --- List Actions ---
    elif query.data == 'list_admins':
        if not is_owner(user_id): return
        admin_list_str = "\n".join(map(str, ADMIN_IDS))
        keyboard = [[InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='owner_panel')]]
        await query.edit_message_text(f"<b>рдорд╛рд▓рд┐рдХ:</b> {OWNER_ID}\n\n<b>рд╕рднреА рдПрдбрдорд┐рди:</b>\n{admin_list_str}", parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'list_users':
        if not is_owner(user_id): return
        keyboard = [[InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='manage_users')]]
        if USER_DATA:
            user_list = []
            for uid, data in USER_DATA.items():
                if uid in ADMIN_IDS: continue
                username = f"@{data['username']}" if data['username'] else "N/A"
                user_list.append(f"<b>{data['full_name']}</b>\n{username}\n<code>{uid}</code>")
            
            if user_list:
                full_list_str = "\n\n".join(user_list)
                await query.edit_message_text(f"<b>рдмреЙрдЯ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛:</b>\n\n{full_list_str}", parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await query.edit_message_text("рдПрдбрдорд┐рди рдХреЗ рдЕрд▓рд╛рд╡рд╛ рдХреЛрдИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рд╣реИред", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text("рдХреЛрдИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╣реАрдВ рдорд┐рд▓рд╛ред", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'list_blocked_users':
        if not is_owner(user_id): return
        keyboard = [[InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='manage_users')]]
        if BLOCKED_USER_IDS:
            blocked_list_str = "\n".join(f"<code>{uid}</code>" for uid in BLOCKED_USER_IDS)
            await query.edit_message_text(f"<b>рдмреНрд▓реЙрдХ рдХрд┐рдП рдЧрдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛:</b>\n\n{blocked_list_str}", parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text("рдХреЛрдИ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдмреНрд▓реЙрдХ рдирд╣реАрдВ рд╣реИред", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'bot_stats':
        if not is_owner(user_id): return
        keyboard = [[InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='manage_users')]]
        total_users = len(USER_DATA)
        admin_count = len(ADMIN_IDS)
        blocked_count = len(BLOCKED_USER_IDS)
        normal_users = total_users - admin_count
        
        stats_text = (
            f"ЁЯУК **рдмреЙрдЯ рдЖрдБрдХрдбрд╝реЗ** ЁЯУК\n\n"
            f"рдХреБрд▓ рдЬреНрдЮрд╛рдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: {total_users}\n"
            f"рдПрдбрдорд┐рди: {admin_count}\n"
            f"рд╕рд╛рдорд╛рдиреНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: {normal_users}\n"
            f"рдмреНрд▓реЙрдХ рдХрд┐рдП рдЧрдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: {blocked_count}"
        )
        await query.edit_message_text(stats_text, parse_mode='Markdown', reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'join_list':
        if not is_owner(user_id): return
        keyboard = []
        if ACTIVE_CHATS:
            for chat_id, title in ACTIVE_CHATS.items():
                keyboard.append([InlineKeyboardButton(f"{title} ({chat_id})", callback_data='noop'), InlineKeyboardButton("тЭМ Leave", callback_data=f'leave_chat_{chat_id}')])
        keyboard.append([InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='owner_panel')])
        await query.edit_message_text("рдмреЙрдЯ рдЗрди рдЧреНрд░реБрдк/рдЪреИрдирд▓реЛрдВ рдореЗрдВ рд╣реИ:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'list_free_channels_admin':
        if not is_admin(user_id): return
        header = "<b>рдлреНрд░реА рдЪреИрдирд▓ рд╕реВрдЪреА (рдПрдбрдорд┐рди рд╡реНрдпреВ):</b>\n\n"
        keyboard = [[InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='manage_free_channels')]]
        if FREE_CHANNELS:
            channel_list = "\n".join(f"{i+1}. <a href='{FREE_CHANNEL_LINKS.get(ch_id, '')}'>{title}</a>" for i, (ch_id, title) in enumerate(FREE_CHANNELS.items()))
        else:
            channel_list = "рдЕрднреА рдХреЛрдИ рдлреНрд░реА рдЪреИрдирд▓ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред"
        await query.edit_message_text(header + channel_list, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard), disable_web_page_preview=True)

    elif query.data == 'list_paid_channels_admin':
        if not is_admin(user_id): return
        header = "<b>рдкреЗрдб рдЪреИрдирд▓ рд╕реВрдЪреА (рдПрдбрдорд┐рди рд╡реНрдпреВ):</b>\n\n"
        keyboard = [[InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='manage_paid_channels')]]
        if PAID_CHANNELS:
            paid_list = "\n".join(f"{i+1}. {entry}" for i, entry in enumerate(PAID_CHANNELS))
        else:
            paid_list = "рдЕрднреА рдХреЛрдИ рдкреЗрдб рдЪреИрдирд▓ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред"
        await query.edit_message_text(header + paid_list, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard), disable_web_page_preview=True)

    # --- User Channel Lists (Buttons) ---
    elif query.data == 'show_free_channels':
        keyboard = []
        for chat_id, title in FREE_CHANNELS.items():
            keyboard.append([InlineKeyboardButton(f"ЁЯЖУ {title}", callback_data=f'join_free_{chat_id}')])
        keyboard.append([InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='start_member')])
        await query.edit_message_text("рдХреГрдкрдпрд╛ рдПрдХ рдлреНрд░реА рдЪреИрдирд▓ рдЪреБрдиреЗрдВ:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'show_paid_channels':
        keyboard = []
        for i, entry in enumerate(PAID_CHANNELS):
            try:
                name = entry.split('<code>')[1].split('</code>')[0]
                keyboard.append([InlineKeyboardButton(f"ЁЯТО {name}", callback_data=f'join_paid_{i}')])
            except IndexError:
                keyboard.append([InlineKeyboardButton(f"ЁЯТО рдкреЗрдб рдЪреИрдирд▓ {i+1}", callback_data=f'join_paid_{i}')])
        keyboard.append([InlineKeyboardButton("тмЕя╕П рд╡рд╛рдкрд╕", callback_data='start_member')])
        await query.edit_message_text("рдХреГрдкрдпрд╛ рдПрдХ рдкреЗрдб рдЪреИрдирд▓ рдЪреБрдиреЗрдВ:", reply_markup=InlineKeyboardMarkup(keyboard))
    
    # --- Join Button Actions ---
    elif query.data.startswith('join_'):
        await query.message.delete()
        
        if query.data.startswith('join_free_'):
            chat_id = int(query.data.split('_')[-1])
            link = FREE_CHANNEL_LINKS.get(chat_id)
            if link:
                await context.bot.send_message(chat_id=user_id, text=f"рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("тЬЕ рдЕрднреА рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ", url=link)]]))
            else:
                await query.answer("рдЗрд╕ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд▓рд┐рдВрдХ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред", show_alert=True)
        
        elif query.data.startswith('join_paid_'):
            index = int(query.data.split('_')[-1])
            if 0 <= index < len(PAID_CHANNELS):
                html_entry = PAID_CHANNELS[index]
                try:
                    link = html_entry.split("href='")[1].split("'")[0]
                    purchase_info = ("\n\n----------------------------------------\n"
                                     "<b>рдпрджрд┐ рдЖрдк рдХреЛрд░реНрд╕ рдЦрд░реАрджрдиреЗ рдореЗрдВ рд░реБрдЪрд┐ рд░рдЦрддреЗ рд╣реИрдВ, рддреЛ рдХреГрдкрдпрд╛ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП @H4R_Contact_bot рдкрд░ рд╕рдВрджреЗрд╢ рднреЗрдЬреЗрдВред</b>")
                    await context.bot.send_message(chat_id=user_id, text=f"рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ:{purchase_info}", 
                                                 reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("тЬЕ рдЕрднреА рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ", url=link)]]),
                                                 parse_mode='HTML',
                                                 disable_web_page_preview=True)
                except IndexError:
                    await query.answer("рдЗрд╕ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд▓рд┐рдВрдХ рдирд╣реАрдВ рдорд┐рд▓рд╛ред", show_alert=True)
        return


# --- INPUT HANDLERS ---
async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user or not is_admin(user.id) or 'next_step' not in context.user_data:
        return

    state = context.user_data.pop('next_step')
    text = update.message.text

    # --- Broadcast & Post ---
    if state == 'awaiting_broadcast_message':
        active_users = [uid for uid in USER_DATA.keys() if uid not in ADMIN_IDS and uid not in BLOCKED_USER_IDS]
        await update.message.reply_text(f"{len(active_users)} рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рд╕рдВрджреЗрд╢ рднреЗрдЬрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...")
        success_count, failed_count = 0, 0
        for u_id in active_users:
            try:
                await context.bot.send_message(chat_id=u_id, text=text)
                success_count += 1
            except Exception:
                failed_count += 1
        await update.message.reply_text(f"рдмреНрд░реЙрдбрдХрд╛рд╕реНрдЯ рдкреВрд░рд╛ рд╣реБрдЖред\nрд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ: {success_count}, рд╡рд┐рдлрд▓: {failed_count}")

    elif state == 'awaiting_post_message':
        successful_posts, failed_posts = 0, []
        for channel_id in FREE_CHANNELS.keys():
            try:
                await context.bot.send_message(chat_id=channel_id, text=text)
                successful_posts += 1
            except Exception as e:
                failed_posts.append(str(channel_id))
        report = f"рд╕рдВрджреЗрд╢ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ {successful_posts} рдЪреИрдирд▓реЛрдВ рдкрд░ рднреЗрдЬ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред"
        if failed_posts: report += f"\nрдЗрди рдкрд░ рднреЗрдЬрдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛: {', '.join(failed_posts)}"
        await update.message.reply_text(report)

    # --- Admin & User Management ---
    elif state in ['awaiting_add_admin_id', 'awaiting_remove_admin_id', 'awaiting_block_user_id', 'awaiting_unblock_user_id']:
        if not is_owner(user.id): return
        try:
            target_id = int(text)
            if state == 'awaiting_add_admin_id':
                if target_id not in ADMIN_IDS:
                    ADMIN_IDS.append(target_id)
                    await update.message.reply_text(f"рдПрдбрдорд┐рди {target_id} рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
                else:
                    await update.message.reply_text("рдпрд╣ рдпреВрдЬрд░ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдПрдбрдорд┐рди рд╣реИред")
            elif state == 'awaiting_remove_admin_id':
                if target_id == OWNER_ID:
                    await update.message.reply_text("рдЖрдк рдорд╛рд▓рд┐рдХ рдХреЛ рдирд╣реАрдВ рд╣рдЯрд╛ рд╕рдХрддреЗред")
                elif target_id in ADMIN_IDS:
                    ADMIN_IDS.remove(target_id)
                    await update.message.reply_text(f"рдПрдбрдорд┐рди {target_id} рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
                else:
                    await update.message.reply_text("рдпрд╣ рдпреВрдЬрд░ рдПрдбрдорд┐рди рдирд╣реАрдВ рд╣реИред")
            elif state == 'awaiting_block_user_id':
                if target_id == OWNER_ID or target_id in ADMIN_IDS:
                    await update.message.reply_text("рдЖрдк рдХрд┐рд╕реА рдПрдбрдорд┐рди рдпрд╛ рдорд╛рд▓рд┐рдХ рдХреЛ рдмреНрд▓реЙрдХ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗред")
                else:
                    BLOCKED_USER_IDS.add(target_id)
                    await update.message.reply_text(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {target_id} рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдмреНрд▓реЙрдХ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
            elif state == 'awaiting_unblock_user_id':
                if target_id in BLOCKED_USER_IDS:
                    BLOCKED_USER_IDS.remove(target_id)
                    await update.message.reply_text(f"рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ {target_id} рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдирдмреНрд▓реЙрдХ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
                else:
                    await update.message.reply_text("рдпрд╣ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдмреНрд▓реЙрдХ рд╕реВрдЪреА рдореЗрдВ рдирд╣реАрдВ рд╣реИред")
            save_data()
        except ValueError:
            await update.message.reply_text("рдЕрдорд╛рдиреНрдп рдпреВрдЬрд░ рдЖрдИрдбреАред")

    # --- Channel Management ---
    elif state == 'awaiting_free_channel_name':
        context.user_data['new_channel_name'] = text
        context.user_data['next_step'] = 'awaiting_free_channel_link'
        await update.message.reply_text("рдареАрдХ рд╣реИ, рдирд╛рдо рд╕реЗрдЯ рд╣реЛ рдЧрдпрд╛ред\n\nрдЕрдм рдЗрд╕ рдмреИрдЪ рдХрд╛ рдЗрдирд╡рд╛рдЗрдЯ рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВ (https://t.me/+...):")
    
    elif state == 'awaiting_free_channel_link':
        context.user_data['new_channel_link'] = text
        context.user_data['next_step'] = 'awaiting_free_channel_chat_id'
        await update.message.reply_text("рдареАрдХ рд╣реИ, рд▓рд┐рдВрдХ рд╕реЗрдЯ рд╣реЛ рдЧрдпрд╛ред\n\nрдЕрдм рдЗрд╕ рдмреИрдЪ рдХреА рдЪреИрдЯ рдЖрдИрдбреА рднреЗрдЬреЗрдВ (-100...):")

    elif state == 'awaiting_free_channel_chat_id':
        name = context.user_data.pop('new_channel_name', None)
        link = context.user_data.pop('new_channel_link', None)
        try:
            chat_id = int(text)
            if not str(chat_id).startswith("-100"):
                await update.message.reply_text("рдЕрдорд╛рдиреНрдп рдЪреИрдЯ рдЖрдИрдбреАред рдпрд╣ -100 рд╕реЗ рд╢реБрд░реВ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
                return

            if name and link:
                FREE_CHANNELS[chat_id] = name
                FREE_CHANNEL_LINKS[chat_id] = link
                save_data()
                await update.message.reply_text(f"рд╕рдлрд▓рддрд╛! рдлреНрд░реА рдЪреИрдирд▓ '{name}' рдХреЛ рд╕реВрдЪреА рдореЗрдВ рдЬреЛрдбрд╝ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
            else:
                await update.message.reply_text("рдХреБрдЫ рдЬрд╛рдирдХрд╛рд░реА рдЧреБрдо рдереАред рдХреГрдкрдпрд╛ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВред")
        except ValueError:
            await update.message.reply_text("рдЕрдорд╛рдиреНрдп рдЪреИрдЯ рдЖрдИрдбреАред рдХреГрдкрдпрд╛ рдХреЗрд╡рд▓ рдирдВрдмрд░ рднреЗрдЬреЗрдВред")

    elif state == 'awaiting_remove_free_channel_num':
        try:
            index_to_remove = int(text) - 1
            channel_ids = list(FREE_CHANNELS.keys())
            if 0 <= index_to_remove < len(channel_ids):
                removed_channel_id = channel_ids[index_to_remove]
                removed_channel_title = FREE_CHANNELS.pop(removed_channel_id)
                FREE_CHANNEL_LINKS.pop(removed_channel_id, None)
                save_data()
                await update.message.reply_text(f"рдлреНрд░реА рдЪреИрдирд▓ '{removed_channel_title}' рдХреЛ рд╕реВрдЪреА рд╕реЗ рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
            else:
                await update.message.reply_text("рдЕрдорд╛рдиреНрдп рдирдВрдмрд░ред")
        except ValueError:
            await update.message.reply_text("рдХреГрдкрдпрд╛ рдПрдХ рдирдВрдмрд░ рднреЗрдЬреЗрдВред")

    elif state == 'awaiting_paid_channel_name':
        context.user_data['new_channel_name'] = text
        context.user_data['next_step'] = 'awaiting_paid_channel_link'
        await update.message.reply_text("рдЕрдм рдЗрд╕ рдмреИрдЪ рдХрд╛ рдЗрдирд╡рд╛рдЗрдЯ рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВ (https://t.me/+...):")

    elif state == 'awaiting_paid_channel_link':
        name = context.user_data.pop('new_channel_name', 'N/A')
        link = text
        html_entry = f"<a href='{link}'>ЁЯТО<code>{name}</code></a> - рдкреНрд░реАрдорд┐рдпрдо рдХрдВрдЯреЗрдВрдЯ рдХреЗ рд▓рд┐рдПред"
        PAID_CHANNELS.append(html_entry)
        save_data()
        await update.message.reply_text(f"рдкреЗрдб рдЪреИрдирд▓ '{name}' рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")

    elif state == 'awaiting_remove_paid_channel_num':
        try:
            index_to_remove = int(text) - 1
            if 0 <= index_to_remove < len(PAID_CHANNELS):
                removed_entry = PAID_CHANNELS.pop(index_to_remove)
                save_data()
                await update.message.reply_html(f"рдкреЗрдб рдЪреИрдирд▓ рдПрдВрдЯреНрд░реА рд╣рдЯрд╛ рджреА рдЧрдИ: {removed_entry}")
            else:
                await update.message.reply_text("рдЕрдорд╛рдиреНрдп рдирдВрдмрд░ред")
        except ValueError:
            await update.message.reply_text("рдХреГрдкрдпрд╛ рдПрдХ рдирдВрдмрд░ рднреЗрдЬреЗрдВред")

# --- Global Error Handler ---
async def error_handler(update, context):
    try:
        context.application.logger.exception("Unhandled exception while handling update: %s", update)
    except Exception:
        pass



def main():
    """Starts the bot."""
    load_data() # Load data on startup
    
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # Register handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("id", id_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))
    application.add_handler(ChatMemberHandler(track_user_status, ChatMemberHandler.CHAT_MEMBER))
    application.add_handler(ChatMemberHandler(track_bot_status, ChatMemberHandler.MY_CHAT_MEMBER))
    
    print("рдмреЙрдЯ рд╢реБрд░реВ рд╣реЛ рдЧрдпрд╛ рд╣реИ... (рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреНрд░рдмрдВрдзрди рдХреЗ рд╕рд╛рде)")
    application.run_polling()


if __name__ == '__main__':
    main()
